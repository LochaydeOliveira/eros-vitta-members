Eros Vitta Members - Progresso do Projeto

1) O que já foi feito
- Backend PHP puro estruturado (compatível HostGator):
  - public/index.php (roteador), public/.htaccess (rewrite + vars de ambiente)
  - src/* (Router, bootstrap, Config, Database, Http/JsonResponse, Security/Jwt, Middleware/AuthMiddleware)
  - Controllers: AuthController, AdminAuthController, ProductController, AccessController, DownloadController, WebhookController, TestEmailController
  - Mail: SMTP Zoho implementado em src/Mail/Mailer.php (SSL 465 / TLS 587) com fallback para mail()
- Banco de dados (externo ao código):
  - Script SQL enviado anteriormente: schema completo, índices, views para dashboard e snapshots materializados com procedures e EVENT/CRON
- Endpoints disponíveis:
  - GET  /api/health
  - POST /api/test/email (temporário, protegido por APP_KEY)
  - POST /api/auth/register
  - POST /api/auth/login
  - POST /api/auth/password/forgot
  - POST /api/auth/password/reset
  - GET  /api/auth/me (JWT)
  - POST /api/admin/login
  - GET  /api/products (JWT)
  - GET  /api/accesses (JWT)
  - POST /api/downloads/token (JWT)
  - GET  /api/downloads/file?token=...
  - POST /api/hotmart/webhook
- Documentação:
  - README.md na raiz com instruções de configuração, rotas e SMTP Zoho
- Organização de projeto corrigida:
  - Código movido para a raiz (public/, src/, README.md)
  - Subpasta antiga eros-vitta/ removida
- Rotas de diagnóstico removidas do ambiente (segurança): /api/diag/*
- Storage seguro implementado (paths fora de public/ via storage_path_* e streaming autenticado)
- PDF inline habilitado no streaming
- Webhook Hotmart validado via Hottok (X-HOTMART-HOTTOK)
- Envio de e-mail automático no webhook (boas-vindas com login/senha provisória)

2) Onde paramos
- Deploy realizado e API online (ex.: https://erosvitta.com.br)
- Conexão com DB validada (ok)
- Login admin VALIDADO com sucesso (POST /api/admin/login)
- Rotas admin protegidas testadas (ex.: GET /api/admin/users) — acesso ok; lista vazia
- Admin usado: lochaydeguerreiro@hotmail.com (ativo=1, senha atualizada com Bcrypt)
- Rotas de diagnóstico removidas do roteador público
- Webhook processando evento approved -> cria/atualiza usuário, registra compra, calcula data_liberacao (D+7), cria/ativa acesso, envia e-mail

3) O que falta para continuar
- Operacional imediato:
  - Criar um admin de backup e guardar as credenciais com gerenciador
  - Manter endpoints de diagnóstico fora de produção (já removidos)
- Deploy e smoke test (contínuo):
  - Health: GET /api/health
  - (opcional) E-mail: POST /api/test/email; após sucesso, remover por segurança
- Painel Admin (backoffice):
  - Rotas para CRUD de produtos (upload, editar, deletar)
  - CRUD de clientes (listar/editar/bloquear/desbloquear, resetar senha)
  - Atribuir produtos manualmente a clientes
  - Dashboard usando as views e snapshots (resumo, faturamento diário/mensal, top produtos)
- Front-end Área do Membro (React + Tailwind + shadcn/ui):
  - Login, catálogo (Ebooks/Áudios), Perfil
  - Visualização de PDFs (PDF.js) e player de áudio (Wavesurfer.js)
  - Estados: comprado, bloqueado, CTA comprar
- Segurança e robustez:
  - Webhook: manter validação Hottok
  - Rate limiting em login e webhook
  - Logs/observabilidade (falhas de e-mail/webhook)
  - Proteção da mídia (armazenamento fora da public/, streaming autenticado)
  - Watermark opcional para PDFs
- Operacional:
  - CRON diário para snapshots (se EVENT_SCHEDULER indisponível)
  - Backups do banco e retenção

4) Como testar depois do deploy
- Confirmar apontamento de domínio/subdomínio -> public/
- Health:
  curl -s https://SEU_DOMINIO/api/health
- Login admin (produção):
  curl -sS -X POST 'https://SEU_DOMINIO/api/admin/login' \
    -H 'Content-Type: application/json' \
    -d '{"email":"EMAIL_ADMIN","senha":"SENHA_DESEJADA"}'
- Rota admin protegida (substituir TOKEN):
  curl -sS 'https://SEU_DOMINIO/api/admin/users' \
    -H 'Authorization: Bearer TOKEN_AQUI'

5) Notas
- Não commitar APP_KEY/SMTP_PASS. Use variáveis no .htaccess/ambiente do servidor.
- Ao trocar APP_KEY, os JWTs antigos expiram na prática (usuários logam novamente).
- Os arquivos de mídia devem ficar fora da pasta public/ e ser servidos por rota autenticada.
- Não versionar tokens JWT em arquivos do repositório.
- Endpoints de diagnóstico devem ficar desativados em produção.